// Code generated by protoc-gen-gogo.
// source: eventpb/event.proto
// DO NOT EDIT!

/*
	Package eventpb is a generated protocol buffer package.

	It is generated from these files:
		eventpb/event.proto

	It has these top-level messages:
		SubscriptionProvisionedReq
		SubscriptionProvisionedResp
		SubscriptionAwaitingPaymentReq
		SubscriptionAwaitingPaymentResp
		SubscriptionPaidReq
		SubscriptionPaidResp
		ServiceEndSucceededReq
		ServiceEndSucceededResp
		AccountCreatedReq
		AccountCreatedResp
		PaymentMethodCreatedReq
		PaymentMethodCreatedResp
		Notification
*/
package eventpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SubscriptionProvisionedReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *SubscriptionProvisionedReq) Reset()                    { *m = SubscriptionProvisionedReq{} }
func (m *SubscriptionProvisionedReq) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionProvisionedReq) ProtoMessage()               {}
func (*SubscriptionProvisionedReq) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

func (m *SubscriptionProvisionedReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type SubscriptionProvisionedResp struct {
	Activated bool `protobuf:"varint,1,opt,name=activated,proto3" json:"activated,omitempty"`
}

func (m *SubscriptionProvisionedResp) Reset()                    { *m = SubscriptionProvisionedResp{} }
func (m *SubscriptionProvisionedResp) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionProvisionedResp) ProtoMessage()               {}
func (*SubscriptionProvisionedResp) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1} }

type SubscriptionAwaitingPaymentReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *SubscriptionAwaitingPaymentReq) Reset()         { *m = SubscriptionAwaitingPaymentReq{} }
func (m *SubscriptionAwaitingPaymentReq) String() string { return proto.CompactTextString(m) }
func (*SubscriptionAwaitingPaymentReq) ProtoMessage()    {}
func (*SubscriptionAwaitingPaymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptorEvent, []int{2}
}

func (m *SubscriptionAwaitingPaymentReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type SubscriptionAwaitingPaymentResp struct {
	Activated bool `protobuf:"varint,1,opt,name=activated,proto3" json:"activated,omitempty"`
}

func (m *SubscriptionAwaitingPaymentResp) Reset()         { *m = SubscriptionAwaitingPaymentResp{} }
func (m *SubscriptionAwaitingPaymentResp) String() string { return proto.CompactTextString(m) }
func (*SubscriptionAwaitingPaymentResp) ProtoMessage()    {}
func (*SubscriptionAwaitingPaymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptorEvent, []int{3}
}

type SubscriptionPaidReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *SubscriptionPaidReq) Reset()                    { *m = SubscriptionPaidReq{} }
func (m *SubscriptionPaidReq) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionPaidReq) ProtoMessage()               {}
func (*SubscriptionPaidReq) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{4} }

func (m *SubscriptionPaidReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type SubscriptionPaidResp struct {
}

func (m *SubscriptionPaidResp) Reset()                    { *m = SubscriptionPaidResp{} }
func (m *SubscriptionPaidResp) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionPaidResp) ProtoMessage()               {}
func (*SubscriptionPaidResp) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{5} }

type ServiceEndSucceededReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *ServiceEndSucceededReq) Reset()                    { *m = ServiceEndSucceededReq{} }
func (m *ServiceEndSucceededReq) String() string            { return proto.CompactTextString(m) }
func (*ServiceEndSucceededReq) ProtoMessage()               {}
func (*ServiceEndSucceededReq) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{6} }

func (m *ServiceEndSucceededReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type ServiceEndSucceededResp struct {
}

func (m *ServiceEndSucceededResp) Reset()                    { *m = ServiceEndSucceededResp{} }
func (m *ServiceEndSucceededResp) String() string            { return proto.CompactTextString(m) }
func (*ServiceEndSucceededResp) ProtoMessage()               {}
func (*ServiceEndSucceededResp) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{7} }

type AccountCreatedReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *AccountCreatedReq) Reset()                    { *m = AccountCreatedReq{} }
func (m *AccountCreatedReq) String() string            { return proto.CompactTextString(m) }
func (*AccountCreatedReq) ProtoMessage()               {}
func (*AccountCreatedReq) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{8} }

func (m *AccountCreatedReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type AccountCreatedResp struct {
}

func (m *AccountCreatedResp) Reset()                    { *m = AccountCreatedResp{} }
func (m *AccountCreatedResp) String() string            { return proto.CompactTextString(m) }
func (*AccountCreatedResp) ProtoMessage()               {}
func (*AccountCreatedResp) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{9} }

type PaymentMethodCreatedReq struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification" json:"notification,omitempty"`
}

func (m *PaymentMethodCreatedReq) Reset()                    { *m = PaymentMethodCreatedReq{} }
func (m *PaymentMethodCreatedReq) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodCreatedReq) ProtoMessage()               {}
func (*PaymentMethodCreatedReq) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{10} }

func (m *PaymentMethodCreatedReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type PaymentMethodCreatedResp struct {
}

func (m *PaymentMethodCreatedResp) Reset()                    { *m = PaymentMethodCreatedResp{} }
func (m *PaymentMethodCreatedResp) String() string            { return proto.CompactTextString(m) }
func (*PaymentMethodCreatedResp) ProtoMessage()               {}
func (*PaymentMethodCreatedResp) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{11} }

type Notification struct {
	RawPayload     []byte `protobuf:"bytes,1,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
	ID             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
	EntityID       string `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entityID"`
	Domain         string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Action         string `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Created        string `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	OrganizationID string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organizationID"`
	Type           string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Entity         string `protobuf:"bytes,9,opt,name=entity,proto3" json:"entity,omitempty"`
	Changes        string `protobuf:"bytes,10,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{12} }

func init() {
	proto.RegisterType((*SubscriptionProvisionedReq)(nil), "eventpb.SubscriptionProvisionedReq")
	proto.RegisterType((*SubscriptionProvisionedResp)(nil), "eventpb.SubscriptionProvisionedResp")
	proto.RegisterType((*SubscriptionAwaitingPaymentReq)(nil), "eventpb.SubscriptionAwaitingPaymentReq")
	proto.RegisterType((*SubscriptionAwaitingPaymentResp)(nil), "eventpb.SubscriptionAwaitingPaymentResp")
	proto.RegisterType((*SubscriptionPaidReq)(nil), "eventpb.SubscriptionPaidReq")
	proto.RegisterType((*SubscriptionPaidResp)(nil), "eventpb.SubscriptionPaidResp")
	proto.RegisterType((*ServiceEndSucceededReq)(nil), "eventpb.ServiceEndSucceededReq")
	proto.RegisterType((*ServiceEndSucceededResp)(nil), "eventpb.ServiceEndSucceededResp")
	proto.RegisterType((*AccountCreatedReq)(nil), "eventpb.AccountCreatedReq")
	proto.RegisterType((*AccountCreatedResp)(nil), "eventpb.AccountCreatedResp")
	proto.RegisterType((*PaymentMethodCreatedReq)(nil), "eventpb.PaymentMethodCreatedReq")
	proto.RegisterType((*PaymentMethodCreatedResp)(nil), "eventpb.PaymentMethodCreatedResp")
	proto.RegisterType((*Notification)(nil), "eventpb.Notification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for EventService service

type EventServiceClient interface {
	SubscriptionProvisioned(ctx context.Context, in *SubscriptionProvisionedReq, opts ...grpc.CallOption) (*SubscriptionProvisionedResp, error)
	SubscriptionAwaitingPayment(ctx context.Context, in *SubscriptionAwaitingPaymentReq, opts ...grpc.CallOption) (*SubscriptionAwaitingPaymentResp, error)
	SubscriptionPaid(ctx context.Context, in *SubscriptionPaidReq, opts ...grpc.CallOption) (*SubscriptionPaidResp, error)
	ServiceEndSucceeded(ctx context.Context, in *ServiceEndSucceededReq, opts ...grpc.CallOption) (*ServiceEndSucceededResp, error)
	AccountCreated(ctx context.Context, in *AccountCreatedReq, opts ...grpc.CallOption) (*AccountCreatedResp, error)
	PaymentMethodCreated(ctx context.Context, in *PaymentMethodCreatedReq, opts ...grpc.CallOption) (*PaymentMethodCreatedResp, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) SubscriptionProvisioned(ctx context.Context, in *SubscriptionProvisionedReq, opts ...grpc.CallOption) (*SubscriptionProvisionedResp, error) {
	out := new(SubscriptionProvisionedResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/SubscriptionProvisioned", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) SubscriptionAwaitingPayment(ctx context.Context, in *SubscriptionAwaitingPaymentReq, opts ...grpc.CallOption) (*SubscriptionAwaitingPaymentResp, error) {
	out := new(SubscriptionAwaitingPaymentResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/SubscriptionAwaitingPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) SubscriptionPaid(ctx context.Context, in *SubscriptionPaidReq, opts ...grpc.CallOption) (*SubscriptionPaidResp, error) {
	out := new(SubscriptionPaidResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/SubscriptionPaid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ServiceEndSucceeded(ctx context.Context, in *ServiceEndSucceededReq, opts ...grpc.CallOption) (*ServiceEndSucceededResp, error) {
	out := new(ServiceEndSucceededResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/ServiceEndSucceeded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) AccountCreated(ctx context.Context, in *AccountCreatedReq, opts ...grpc.CallOption) (*AccountCreatedResp, error) {
	out := new(AccountCreatedResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/AccountCreated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) PaymentMethodCreated(ctx context.Context, in *PaymentMethodCreatedReq, opts ...grpc.CallOption) (*PaymentMethodCreatedResp, error) {
	out := new(PaymentMethodCreatedResp)
	err := grpc.Invoke(ctx, "/eventpb.EventService/PaymentMethodCreated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	SubscriptionProvisioned(context.Context, *SubscriptionProvisionedReq) (*SubscriptionProvisionedResp, error)
	SubscriptionAwaitingPayment(context.Context, *SubscriptionAwaitingPaymentReq) (*SubscriptionAwaitingPaymentResp, error)
	SubscriptionPaid(context.Context, *SubscriptionPaidReq) (*SubscriptionPaidResp, error)
	ServiceEndSucceeded(context.Context, *ServiceEndSucceededReq) (*ServiceEndSucceededResp, error)
	AccountCreated(context.Context, *AccountCreatedReq) (*AccountCreatedResp, error)
	PaymentMethodCreated(context.Context, *PaymentMethodCreatedReq) (*PaymentMethodCreatedResp, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_SubscriptionProvisioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionProvisionedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).SubscriptionProvisioned(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _EventService_SubscriptionAwaitingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionAwaitingPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).SubscriptionAwaitingPayment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _EventService_SubscriptionPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubscriptionPaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).SubscriptionPaid(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _EventService_ServiceEndSucceeded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ServiceEndSucceededReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).ServiceEndSucceeded(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _EventService_AccountCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AccountCreatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).AccountCreated(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _EventService_PaymentMethodCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PaymentMethodCreatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EventServiceServer).PaymentMethodCreated(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventpb.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscriptionProvisioned",
			Handler:    _EventService_SubscriptionProvisioned_Handler,
		},
		{
			MethodName: "SubscriptionAwaitingPayment",
			Handler:    _EventService_SubscriptionAwaitingPayment_Handler,
		},
		{
			MethodName: "SubscriptionPaid",
			Handler:    _EventService_SubscriptionPaid_Handler,
		},
		{
			MethodName: "ServiceEndSucceeded",
			Handler:    _EventService_ServiceEndSucceeded_Handler,
		},
		{
			MethodName: "AccountCreated",
			Handler:    _EventService_AccountCreated_Handler,
		},
		{
			MethodName: "PaymentMethodCreated",
			Handler:    _EventService_PaymentMethodCreated_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *SubscriptionProvisionedReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionProvisionedReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n1, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SubscriptionProvisionedResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionProvisionedResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Activated {
		data[i] = 0x8
		i++
		if m.Activated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubscriptionAwaitingPaymentReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionAwaitingPaymentReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n2, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SubscriptionAwaitingPaymentResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionAwaitingPaymentResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Activated {
		data[i] = 0x8
		i++
		if m.Activated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubscriptionPaidReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionPaidReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n3, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SubscriptionPaidResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscriptionPaidResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceEndSucceededReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServiceEndSucceededReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n4, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ServiceEndSucceededResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ServiceEndSucceededResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountCreatedReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AccountCreatedReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n5, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AccountCreatedResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AccountCreatedResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PaymentMethodCreatedReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PaymentMethodCreatedReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		data[i] = 0xa
		i++
		i = encodeVarintEvent(data, i, uint64(m.Notification.Size()))
		n6, err := m.Notification.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PaymentMethodCreatedResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PaymentMethodCreatedResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Notification) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Notification) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawPayload != nil {
		if len(m.RawPayload) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintEvent(data, i, uint64(len(m.RawPayload)))
			i += copy(data[i:], m.RawPayload)
		}
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Domain) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Domain)))
		i += copy(data[i:], m.Domain)
	}
	if len(m.Action) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	if len(m.Created) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Created)))
		i += copy(data[i:], m.Created)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.Type) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if len(m.Entity) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Entity)))
		i += copy(data[i:], m.Entity)
	}
	if len(m.Changes) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintEvent(data, i, uint64(len(m.Changes)))
		i += copy(data[i:], m.Changes)
	}
	return i, nil
}

func encodeFixed64Event(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Event(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SubscriptionProvisionedReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SubscriptionProvisionedResp) Size() (n int) {
	var l int
	_ = l
	if m.Activated {
		n += 2
	}
	return n
}

func (m *SubscriptionAwaitingPaymentReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SubscriptionAwaitingPaymentResp) Size() (n int) {
	var l int
	_ = l
	if m.Activated {
		n += 2
	}
	return n
}

func (m *SubscriptionPaidReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SubscriptionPaidResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceEndSucceededReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ServiceEndSucceededResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AccountCreatedReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AccountCreatedResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PaymentMethodCreatedReq) Size() (n int) {
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *PaymentMethodCreatedResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Notification) Size() (n int) {
	var l int
	_ = l
	if m.RawPayload != nil {
		l = len(m.RawPayload)
		if l > 0 {
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Entity)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Changes)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscriptionProvisionedReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionProvisionedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionProvisionedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionProvisionedResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionProvisionedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionProvisionedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionAwaitingPaymentReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionAwaitingPaymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionAwaitingPaymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionAwaitingPaymentResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionAwaitingPaymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionAwaitingPaymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionPaidReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionPaidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionPaidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionPaidResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionPaidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionPaidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEndSucceededReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEndSucceededReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEndSucceededReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEndSucceededResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEndSucceededResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEndSucceededResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCreatedReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCreatedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCreatedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCreatedResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCreatedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCreatedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethodCreatedReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentMethodCreatedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentMethodCreatedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethodCreatedResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentMethodCreatedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentMethodCreatedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPayload = append(m.RawPayload[:0], data[iNdEx:postIndex]...)
			if m.RawPayload == nil {
				m.RawPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorEvent = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5f, 0x6f, 0x12, 0x41,
	0x10, 0x6f, 0xb1, 0x16, 0x98, 0x12, 0xac, 0x5b, 0xa4, 0xe7, 0xb5, 0x42, 0xc5, 0x26, 0xf6, 0x45,
	0x48, 0x6a, 0x7c, 0x30, 0x3e, 0x98, 0x56, 0x79, 0x30, 0xa6, 0x15, 0x0f, 0x13, 0x13, 0x8d, 0x69,
	0x96, 0xbb, 0xe5, 0xd8, 0x44, 0x6e, 0xcf, 0x63, 0xa1, 0xc1, 0x4f, 0xe2, 0x17, 0x32, 0xf1, 0xd1,
	0x4f, 0x60, 0x4c, 0xfb, 0xe6, 0xa7, 0x70, 0x6f, 0xf6, 0x5a, 0x38, 0x38, 0xc0, 0x04, 0x1f, 0xb6,
	0xdd, 0xf9, 0xf7, 0x9b, 0xdf, 0xdc, 0xec, 0x0c, 0xb0, 0xc5, 0x06, 0xcc, 0x93, 0x7e, 0xab, 0x86,
	0xff, 0xab, 0x7e, 0x20, 0xa4, 0x20, 0xe9, 0x48, 0x69, 0x3e, 0x72, 0xb9, 0xec, 0xf4, 0x5b, 0x55,
	0x5b, 0x74, 0x6b, 0xae, 0x70, 0x45, 0x0d, 0xed, 0xad, 0x7e, 0x1b, 0x25, 0x14, 0xf0, 0xa6, 0xe3,
	0x2a, 0xef, 0xc1, 0x6c, 0xf6, 0x5b, 0x3d, 0x3b, 0xe0, 0xbe, 0xe4, 0xc2, 0x6b, 0x04, 0x62, 0xc0,
	0x7b, 0xea, 0xc2, 0x1c, 0x8b, 0x7d, 0x21, 0x4f, 0x21, 0xe7, 0x09, 0xc9, 0xdb, 0xdc, 0xa6, 0xa1,
	0xd5, 0x58, 0xdd, 0x5b, 0x3d, 0xd8, 0x38, 0xbc, 0x53, 0x8d, 0x92, 0x55, 0x4f, 0xc7, 0x8c, 0x56,
	0xcc, 0xb5, 0xf2, 0x0c, 0x76, 0x66, 0x02, 0xf7, 0x7c, 0xb2, 0x0b, 0x59, 0x6a, 0x4b, 0x3e, 0xa0,
	0x92, 0x39, 0x08, 0x9b, 0xb1, 0x46, 0x8a, 0xca, 0x47, 0x28, 0x8d, 0x07, 0x1f, 0x9d, 0x53, 0x2e,
	0xb9, 0xe7, 0x36, 0xe8, 0xb0, 0xab, 0x12, 0x2f, 0xc9, 0xec, 0x39, 0x94, 0xe7, 0x82, 0x2f, 0x64,
	0xd7, 0x80, 0xad, 0x58, 0x69, 0x94, 0x2f, 0xfb, 0xb1, 0x8a, 0x50, 0x98, 0x46, 0xec, 0xf9, 0x95,
	0x26, 0x14, 0x9b, 0x2c, 0x18, 0x70, 0x9b, 0xd5, 0x3d, 0xa7, 0xd9, 0xb7, 0x6d, 0xc6, 0x9c, 0xa5,
	0x3b, 0x73, 0x17, 0xb6, 0x13, 0x41, 0x55, 0xbe, 0x53, 0xb8, 0x7d, 0x64, 0xdb, 0xa2, 0xef, 0xc9,
	0x17, 0x01, 0x0b, 0x6b, 0x5d, 0x32, 0x55, 0x01, 0xc8, 0x24, 0x9e, 0xca, 0xf2, 0x0e, 0xb6, 0xa3,
	0x8f, 0x7d, 0xc2, 0x64, 0x47, 0x38, 0xff, 0x27, 0x97, 0x09, 0x46, 0x32, 0xaa, 0xca, 0x78, 0x99,
	0x82, 0xdc, 0x78, 0x28, 0x29, 0xc3, 0x46, 0x40, 0xcf, 0xcf, 0x7c, 0x3a, 0xfc, 0x2c, 0xa8, 0x6e,
	0x71, 0xce, 0x02, 0xa5, 0x6a, 0x68, 0x8d, 0x7a, 0x01, 0x29, 0xee, 0x18, 0x29, 0xa5, 0xcf, 0x1e,
	0xe7, 0x2e, 0x7e, 0x95, 0x53, 0xaf, 0x5e, 0xfe, 0x51, 0x7f, 0x55, 0x5f, 0xd4, 0x21, 0x4f, 0x20,
	0xab, 0xf2, 0x70, 0x39, 0x3c, 0x53, 0x4e, 0x37, 0xd0, 0xc9, 0x50, 0x4e, 0x99, 0x3a, 0x2a, 0xd1,
	0x35, 0xc3, 0xa2, 0xbb, 0x75, 0x75, 0x73, 0x48, 0x11, 0xd6, 0x1d, 0xd1, 0xa5, 0xdc, 0x33, 0xd6,
	0xc2, 0x18, 0x2b, 0x92, 0x42, 0x7d, 0xf8, 0xba, 0x54, 0xbd, 0x37, 0xb5, 0x5e, 0x4b, 0xc4, 0x80,
	0xb4, 0xad, 0xab, 0x30, 0xd6, 0xd1, 0x70, 0x25, 0x92, 0x13, 0xb8, 0x25, 0x02, 0x97, 0x7a, 0xfc,
	0x2b, 0xd6, 0x13, 0xd2, 0x48, 0x23, 0x8d, 0x7d, 0x45, 0x23, 0xff, 0x66, 0xcc, 0x84, 0x64, 0xf2,
	0x22, 0xa6, 0xb1, 0xe2, 0xb2, 0x43, 0x08, 0xac, 0xc9, 0xa1, 0xcf, 0x8c, 0x0c, 0x66, 0xc1, 0x7b,
	0x48, 0x4a, 0x13, 0x37, 0xb2, 0x9a, 0x94, 0x96, 0x90, 0x54, 0x87, 0x7a, 0x2e, 0xeb, 0x19, 0x10,
	0x91, 0xd2, 0xe2, 0xe1, 0xf7, 0x35, 0xc8, 0xd5, 0xc3, 0x46, 0x45, 0xcf, 0x8b, 0xb4, 0xd5, 0x4b,
	0x4b, 0xde, 0x01, 0xe4, 0xc1, 0x75, 0x4b, 0x67, 0xaf, 0x1f, 0x73, 0x7f, 0xb1, 0x93, 0x6a, 0xee,
	0x0a, 0x09, 0xe2, 0xbb, 0x66, 0x62, 0xa2, 0xc9, 0xc3, 0x44, 0x98, 0xe9, 0xa5, 0x62, 0x1e, 0xfc,
	0x9b, 0x23, 0xe6, 0x7c, 0x0b, 0x9b, 0x93, 0x23, 0x4b, 0x76, 0x93, 0xf9, 0xea, 0xfd, 0x60, 0xde,
	0x9b, 0x63, 0x45, 0xc8, 0x0f, 0x6a, 0xaf, 0x4c, 0x0f, 0x26, 0x29, 0x8f, 0xe2, 0x12, 0x77, 0x81,
	0xb9, 0x37, 0xdf, 0x01, 0xb1, 0x5f, 0x43, 0x3e, 0x3e, 0x89, 0xc4, 0xbc, 0x8e, 0x9a, 0x1a, 0x79,
	0x73, 0x67, 0xa6, 0x0d, 0xc1, 0x3e, 0x41, 0x21, 0x69, 0xd4, 0xc8, 0x88, 0xc8, 0x8c, 0xf9, 0x36,
	0xef, 0x2f, 0xf0, 0x08, 0xe1, 0x8f, 0x37, 0x7f, 0x5c, 0x94, 0x56, 0x7f, 0xaa, 0xf3, 0x5b, 0x9d,
	0x6f, 0x97, 0xa5, 0x95, 0xd6, 0x3a, 0xfe, 0x58, 0x3d, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7a,
	0x86, 0x69, 0x90, 0xfb, 0x06, 0x00, 0x00,
}
