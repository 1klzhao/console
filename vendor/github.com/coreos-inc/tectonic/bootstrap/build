#!/bin/bash

set -euo pipefail

: ${BUILD_ALL:=false}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MANAGER_DIR="$SCRIPT_DIR/../manager"
MANAGER_MANIFESTS_DIR="$MANAGER_DIR/.workspace/tmpdir/manifests/manager"

if [ "$BUILD_ALL" = "true" ]; then
    make -f "$MANAGER_DIR/Makefile" clean-manager-manifests manager-manifests
else
    # if we're not building everything, then manager won't be built, so we
    # should use whatever the latest tag is
    make -f "$MANAGER_DIR/Makefile" clean-manager-manifests manager-manifests TECTONIC_VERSION=vdevel-latest
fi

pushd $SCRIPT_DIR > /dev/null

# ensure we don't have rogue dependencies. If your build is failing
# here, then you need to add packages (and their versions) to glide.yaml
if diff <(cat glide.yaml | sed -n 's/^.* package: //gp' | sort) \
        <(cat glide.lock | sed -n 's/^.* name: //gp' | sort); then
    : # do nothing, glide.yaml is up to date
else
    echo "Please list all (even transitive) dependencies, along with their versions, in glide.yaml"
    echo "see README.md for details"
    exit 1
fi

# ensure all dependencies in glide.yaml have pinned versions
DEPCOUNT=$(cat glide.yaml | sed -n 's/^.* package: //gp' | wc -l)
VERSIONCOUNT=$(cat glide.yaml |  sed -n 's/^.* version: //gp' | wc -l)
if [ $DEPCOUNT -ne $VERSIONCOUNT ]; then
    echo "Please record a version for every dependency in glide.yaml"
    echo "(if you're in doubt, just use the version from glide.lock)"
    echo "see README.md for details"
    exit 1
fi

mkdir -p assets/public/scripts bin/linux bin/darwin bin/windows binassets dev/scripts tools

# Front end build must happen before Go assets are compiled (since
# frontend build products are compiled as Go assets)
pushd frontend > /dev/null
npm prune --quiet --progress=false
npm install --quiet --progress=false
npm run -s build
npm run -s lint
popd > /dev/null

# We use go-bindata locally, so build it for the local arch/os regardless of where our final bin will end up.
LOCALOS=$(go version | sed -n 's/^.* \([[:alnum:]]*\)\/\([[:alnum:]]*\)$/\1/p')
LOCALARCH=$(go version | sed -n 's/^.* \([[:alnum:]]*\)\/\([[:alnum:]]*\)$/\2/p')

# Ensure we have the latest manifests for tectonic manager
rm -f $SCRIPT_DIR/assets/tectonic-manager-deployment.yaml $SCRIPT_DIR/assets/tectonic-manager-service.yaml
cp $MANAGER_MANIFESTS_DIR/tectonic-manager-deployment.yaml $SCRIPT_DIR/assets/
cp $MANAGER_MANIFESTS_DIR/tectonic-manager-service.yaml $SCRIPT_DIR/assets/

GOOS=$LOCALOS GOARCH=$LOCALARCH CGO_ENABLED=0 \
    go build -o tools/go-bindata ./vendor/github.com/jteeuwen/go-bindata/go-bindata
./tools/go-bindata -pkg binassets -o binassets/assets.go -prefix assets assets/...

LD_FLAGS="-w -X github.com/coreos-inc/tectonic/bootstrap/server/version.Version=$(../git-version)"
CGO_ENABLED=0 go build -o bin/devstrap -ldflags="$LD_FLAGS" -a -tags netgo github.com/coreos-inc/tectonic/bootstrap/cmd/devstrap

if [ "$BUILD_ALL" = "true" ]; then
    GOOS=linux CGO_ENABLED=0 go build -o bin/linux/bootstrap -ldflags="$LD_FLAGS" -a -tags netgo github.com/coreos-inc/tectonic/bootstrap/cmd/bootstrap
    GOOS=darwin CGO_ENABLED=0 go build -o bin/darwin/bootstrap -ldflags="$LD_FLAGS" -a -tags netgo github.com/coreos-inc/tectonic/bootstrap/cmd/bootstrap
    GOOS=windows CGO_ENABLED=0 go build -o bin/windows/bootstrap -ldflags="$LD_FLAGS" -a -tags netgo github.com/coreos-inc/tectonic/bootstrap/cmd/bootstrap
else
    # Build for the local OS to speed up non-release builds
    GOOS=$LOCALOS CGO_ENABLED=0 go build -o bin/$LOCALOS/bootstrap -ldflags="$LD_FLAGS" -a -tags netgo github.com/coreos-inc/tectonic/bootstrap/cmd/bootstrap
fi

popd > /dev/null
